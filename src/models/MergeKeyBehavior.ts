/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Content } from './Content';
import {
    ContentFromJSON,
    ContentFromJSONTyped,
    ContentToJSON,
} from './Content';
import type { ContentKey } from './ContentKey';
import {
    ContentKeyFromJSON,
    ContentKeyFromJSONTyped,
    ContentKeyToJSON,
} from './ContentKey';
import type { ContentMetadata } from './ContentMetadata';
import {
    ContentMetadataFromJSON,
    ContentMetadataFromJSONTyped,
    ContentMetadataToJSON,
} from './ContentMetadata';
import type { Documentation } from './Documentation';
import {
    DocumentationFromJSON,
    DocumentationFromJSONTyped,
    DocumentationToJSON,
} from './Documentation';
import type { MergeBehavior } from './MergeBehavior';
import {
    MergeBehaviorFromJSON,
    MergeBehaviorFromJSONTyped,
    MergeBehaviorToJSON,
} from './MergeBehavior';

/**
 * 
 * @export
 * @interface MergeKeyBehavior
 */
export interface MergeKeyBehavior {
    /**
     * 
     * @type {ContentKey}
     * @memberof MergeKeyBehavior
     */
    key?: ContentKey;
    /**
     * 
     * @type {MergeBehavior}
     * @memberof MergeKeyBehavior
     */
    mergeBehavior?: MergeBehavior;
    /**
     * 
     * @type {Content}
     * @memberof MergeKeyBehavior
     */
    expectedTargetContent?: Content;
    /**
     * 
     * @type {Content}
     * @memberof MergeKeyBehavior
     */
    resolvedContent?: Content;
    /**
     * 
     * @type {Documentation}
     * @memberof MergeKeyBehavior
     */
    expectedTargetDocumentation?: Documentation;
    /**
     * 
     * @type {Documentation}
     * @memberof MergeKeyBehavior
     */
    resolvedDocumentation?: Documentation;
    /**
     * 
     * @type {Array<ContentMetadata>}
     * @memberof MergeKeyBehavior
     */
    metadata?: Array<ContentMetadata>;
}

/**
 * Check if a given object implements the MergeKeyBehavior interface.
 */
export function instanceOfMergeKeyBehavior(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MergeKeyBehaviorFromJSON(json: any): MergeKeyBehavior {
    return MergeKeyBehaviorFromJSONTyped(json, false);
}

export function MergeKeyBehaviorFromJSONTyped(json: any, ignoreDiscriminator: boolean): MergeKeyBehavior {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : ContentKeyFromJSON(json['key']),
        'mergeBehavior': !exists(json, 'mergeBehavior') ? undefined : MergeBehaviorFromJSON(json['mergeBehavior']),
        'expectedTargetContent': !exists(json, 'expectedTargetContent') ? undefined : ContentFromJSON(json['expectedTargetContent']),
        'resolvedContent': !exists(json, 'resolvedContent') ? undefined : ContentFromJSON(json['resolvedContent']),
        'expectedTargetDocumentation': !exists(json, 'expectedTargetDocumentation') ? undefined : DocumentationFromJSON(json['expectedTargetDocumentation']),
        'resolvedDocumentation': !exists(json, 'resolvedDocumentation') ? undefined : DocumentationFromJSON(json['resolvedDocumentation']),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(ContentMetadataFromJSON)),
    };
}

export function MergeKeyBehaviorToJSON(value?: MergeKeyBehavior | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyToJSON(value.key),
        'mergeBehavior': MergeBehaviorToJSON(value.mergeBehavior),
        'expectedTargetContent': ContentToJSON(value.expectedTargetContent),
        'resolvedContent': ContentToJSON(value.resolvedContent),
        'expectedTargetDocumentation': DocumentationToJSON(value.expectedTargetDocumentation),
        'resolvedDocumentation': DocumentationToJSON(value.resolvedDocumentation),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(ContentMetadataToJSON)),
    };
}

