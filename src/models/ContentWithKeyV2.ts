/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV2 } from './ContentKeyV2';
import {
    ContentKeyV2FromJSON,
    ContentKeyV2FromJSONTyped,
    ContentKeyV2ToJSON,
} from './ContentKeyV2';
import type { ContentV2 } from './ContentV2';
import {
    ContentV2FromJSON,
    ContentV2FromJSONTyped,
    ContentV2ToJSON,
} from './ContentV2';
import type { DocumentationV2 } from './DocumentationV2';
import {
    DocumentationV2FromJSON,
    DocumentationV2FromJSONTyped,
    DocumentationV2ToJSON,
} from './DocumentationV2';

/**
 * 
 * @export
 * @interface ContentWithKeyV2
 */
export interface ContentWithKeyV2 {
    /**
     * 
     * @type {ContentKeyV2}
     * @memberof ContentWithKeyV2
     */
    key: ContentKeyV2;
    /**
     * 
     * @type {ContentV2}
     * @memberof ContentWithKeyV2
     */
    content: ContentV2;
    /**
     * 
     * @type {DocumentationV2}
     * @memberof ContentWithKeyV2
     */
    documentation?: DocumentationV2;
}

/**
 * Check if a given object implements the ContentWithKeyV2 interface.
 */
export function instanceOfContentWithKeyV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function ContentWithKeyV2FromJSON(json: any): ContentWithKeyV2 {
    return ContentWithKeyV2FromJSONTyped(json, false);
}

export function ContentWithKeyV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentWithKeyV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': ContentKeyV2FromJSON(json['key']),
        'content': ContentV2FromJSON(json['content']),
        'documentation': !exists(json, 'documentation') ? undefined : DocumentationV2FromJSON(json['documentation']),
    };
}

export function ContentWithKeyV2ToJSON(value?: ContentWithKeyV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyV2ToJSON(value.key),
        'content': ContentV2ToJSON(value.content),
        'documentation': DocumentationV2ToJSON(value.documentation),
    };
}

