/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommitMetaV1 } from './CommitMetaV1';
import {
    CommitMetaV1FromJSON,
    CommitMetaV1FromJSONTyped,
    CommitMetaV1ToJSON,
} from './CommitMetaV1';

/**
 * Only returned by the server when explicitly requested by the client and contains the following information:
 * 
 * - numCommitsAhead (number of commits ahead of the default branch)
 * 
 * - numCommitsBehind (number of commits behind the default branch)
 * 
 * - commitMetaOfHEAD (the commit metadata of the HEAD commit)
 * 
 * - commonAncestorHash (the hash of the common ancestor in relation to the default branch).
 * 
 * - numTotalCommits (the total number of commits in this reference).
 * @export
 * @interface ReferenceMetadataV1
 */
export interface ReferenceMetadataV1 {
    /**
     * 
     * @type {number}
     * @memberof ReferenceMetadataV1
     */
    numCommitsAhead?: number;
    /**
     * 
     * @type {number}
     * @memberof ReferenceMetadataV1
     */
    numCommitsBehind?: number;
    /**
     * 
     * @type {CommitMetaV1}
     * @memberof ReferenceMetadataV1
     */
    commitMetaOfHEAD?: CommitMetaV1;
    /**
     * 
     * @type {string}
     * @memberof ReferenceMetadataV1
     */
    commonAncestorHash?: string;
    /**
     * 
     * @type {number}
     * @memberof ReferenceMetadataV1
     */
    numTotalCommits?: number;
}

/**
 * Check if a given object implements the ReferenceMetadataV1 interface.
 */
export function instanceOfReferenceMetadataV1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReferenceMetadataV1FromJSON(json: any): ReferenceMetadataV1 {
    return ReferenceMetadataV1FromJSONTyped(json, false);
}

export function ReferenceMetadataV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferenceMetadataV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'numCommitsAhead': !exists(json, 'numCommitsAhead') ? undefined : json['numCommitsAhead'],
        'numCommitsBehind': !exists(json, 'numCommitsBehind') ? undefined : json['numCommitsBehind'],
        'commitMetaOfHEAD': !exists(json, 'commitMetaOfHEAD') ? undefined : CommitMetaV1FromJSON(json['commitMetaOfHEAD']),
        'commonAncestorHash': !exists(json, 'commonAncestorHash') ? undefined : json['commonAncestorHash'],
        'numTotalCommits': !exists(json, 'numTotalCommits') ? undefined : json['numTotalCommits'],
    };
}

export function ReferenceMetadataV1ToJSON(value?: ReferenceMetadataV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'numCommitsAhead': value.numCommitsAhead,
        'numCommitsBehind': value.numCommitsBehind,
        'commitMetaOfHEAD': CommitMetaV1ToJSON(value.commitMetaOfHEAD),
        'commonAncestorHash': value.commonAncestorHash,
        'numTotalCommits': value.numTotalCommits,
    };
}

