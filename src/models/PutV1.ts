/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV1 } from './ContentKeyV1';
import {
    ContentKeyV1FromJSON,
    ContentKeyV1FromJSONTyped,
    ContentKeyV1ToJSON,
} from './ContentKeyV1';
import type { ContentV1 } from './ContentV1';
import {
    ContentV1FromJSON,
    ContentV1FromJSONTyped,
    ContentV1ToJSON,
} from './ContentV1';
import type { PutV1ExpectedContent } from './PutV1ExpectedContent';
import {
    PutV1ExpectedContentFromJSON,
    PutV1ExpectedContentFromJSONTyped,
    PutV1ExpectedContentToJSON,
} from './PutV1ExpectedContent';

/**
 * Used to add new content or to update existing content.
 * 
 * A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).
 * 
 * A content object is updated by populating the `value` containing the correct content-id.
 * 
 * If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.
 * 
 * A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
 * @export
 * @interface PutV1
 */
export interface PutV1 {
    /**
     * 
     * @type {ContentKeyV1}
     * @memberof PutV1
     */
    key: ContentKeyV1;
    /**
     * 
     * @type {ContentV1}
     * @memberof PutV1
     */
    content: ContentV1;
    /**
     * 
     * @type {PutV1ExpectedContent}
     * @memberof PutV1
     * @deprecated
     */
    expectedContent?: PutV1ExpectedContent;
}

/**
 * Check if a given object implements the PutV1 interface.
 */
export function instanceOfPutV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function PutV1FromJSON(json: any): PutV1 {
    return PutV1FromJSONTyped(json, false);
}

export function PutV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): PutV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': ContentKeyV1FromJSON(json['key']),
        'content': ContentV1FromJSON(json['content']),
        'expectedContent': !exists(json, 'expectedContent') ? undefined : PutV1ExpectedContentFromJSON(json['expectedContent']),
    };
}

export function PutV1ToJSON(value?: PutV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyV1ToJSON(value.key),
        'content': ContentV1ToJSON(value.content),
        'expectedContent': PutV1ExpectedContentToJSON(value.expectedContent),
    };
}

