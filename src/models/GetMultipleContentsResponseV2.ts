/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentWithKeyV2 } from './ContentWithKeyV2';
import {
    ContentWithKeyV2FromJSON,
    ContentWithKeyV2FromJSONTyped,
    ContentWithKeyV2ToJSON,
} from './ContentWithKeyV2';
import type { ReferenceV2 } from './ReferenceV2';
import {
    ReferenceV2FromJSON,
    ReferenceV2FromJSONTyped,
    ReferenceV2ToJSON,
} from './ReferenceV2';

/**
 * 
 * @export
 * @interface GetMultipleContentsResponseV2
 */
export interface GetMultipleContentsResponseV2 {
    /**
     * 
     * @type {Array<ContentWithKeyV2>}
     * @memberof GetMultipleContentsResponseV2
     */
    contents: Array<ContentWithKeyV2>;
    /**
     * 
     * @type {ReferenceV2}
     * @memberof GetMultipleContentsResponseV2
     */
    effectiveReference?: ReferenceV2;
}

/**
 * Check if a given object implements the GetMultipleContentsResponseV2 interface.
 */
export function instanceOfGetMultipleContentsResponseV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contents" in value;

    return isInstance;
}

export function GetMultipleContentsResponseV2FromJSON(json: any): GetMultipleContentsResponseV2 {
    return GetMultipleContentsResponseV2FromJSONTyped(json, false);
}

export function GetMultipleContentsResponseV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): GetMultipleContentsResponseV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contents': ((json['contents'] as Array<any>).map(ContentWithKeyV2FromJSON)),
        'effectiveReference': !exists(json, 'effectiveReference') ? undefined : ReferenceV2FromJSON(json['effectiveReference']),
    };
}

export function GetMultipleContentsResponseV2ToJSON(value?: GetMultipleContentsResponseV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contents': ((value.contents as Array<any>).map(ContentWithKeyV2ToJSON)),
        'effectiveReference': ReferenceV2ToJSON(value.effectiveReference),
    };
}

