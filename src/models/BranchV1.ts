/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReferenceMetadataV1 } from './ReferenceMetadataV1';
import {
    ReferenceMetadataV1FromJSON,
    ReferenceMetadataV1FromJSONTyped,
    ReferenceMetadataV1ToJSON,
} from './ReferenceMetadataV1';

/**
 * 
 * @export
 * @interface BranchV1
 */
export interface BranchV1 {
    /**
     * 
     * @type {string}
     * @memberof BranchV1
     */
    name: string;
    /**
     * 
     * @type {ReferenceMetadataV1}
     * @memberof BranchV1
     */
    metadata?: ReferenceMetadataV1;
    /**
     * 
     * @type {string}
     * @memberof BranchV1
     */
    hash?: string;
}

/**
 * Check if a given object implements the BranchV1 interface.
 */
export function instanceOfBranchV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function BranchV1FromJSON(json: any): BranchV1 {
    return BranchV1FromJSONTyped(json, false);
}

export function BranchV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): BranchV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'metadata': !exists(json, 'metadata') ? undefined : ReferenceMetadataV1FromJSON(json['metadata']),
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
    };
}

export function BranchV1ToJSON(value?: BranchV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'metadata': ReferenceMetadataV1ToJSON(value.metadata),
        'hash': value.hash,
    };
}

