/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MergeBehavior } from './MergeBehavior';
import {
    MergeBehaviorFromJSON,
    MergeBehaviorFromJSONTyped,
    MergeBehaviorToJSON,
} from './MergeBehavior';
import type { MergeKeyBehavior } from './MergeKeyBehavior';
import {
    MergeKeyBehaviorFromJSON,
    MergeKeyBehaviorFromJSONTyped,
    MergeKeyBehaviorToJSON,
} from './MergeKeyBehavior';

/**
 * 
 * @export
 * @interface Transplant1
 */
export interface Transplant1 {
    /**
     * 
     * @type {string}
     * @memberof Transplant1
     */
    fromRefName: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof Transplant1
     */
    hashesToTransplant: Set<string>;
    /**
     * 
     * @type {Array<MergeKeyBehavior>}
     * @memberof Transplant1
     */
    keyMergeModes?: Array<MergeKeyBehavior>;
    /**
     * 
     * @type {MergeBehavior}
     * @memberof Transplant1
     */
    defaultKeyMergeMode?: MergeBehavior;
    /**
     * 
     * @type {boolean}
     * @memberof Transplant1
     */
    dryRun?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Transplant1
     */
    fetchAdditionalInfo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Transplant1
     */
    returnConflictAsResult?: boolean;
}

/**
 * Check if a given object implements the Transplant1 interface.
 */
export function instanceOfTransplant1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fromRefName" in value;
    isInstance = isInstance && "hashesToTransplant" in value;

    return isInstance;
}

export function Transplant1FromJSON(json: any): Transplant1 {
    return Transplant1FromJSONTyped(json, false);
}

export function Transplant1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Transplant1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromRefName': json['fromRefName'],
        'hashesToTransplant': json['hashesToTransplant'],
        'keyMergeModes': !exists(json, 'keyMergeModes') ? undefined : ((json['keyMergeModes'] as Array<any>).map(MergeKeyBehaviorFromJSON)),
        'defaultKeyMergeMode': !exists(json, 'defaultKeyMergeMode') ? undefined : MergeBehaviorFromJSON(json['defaultKeyMergeMode']),
        'dryRun': !exists(json, 'dryRun') ? undefined : json['dryRun'],
        'fetchAdditionalInfo': !exists(json, 'fetchAdditionalInfo') ? undefined : json['fetchAdditionalInfo'],
        'returnConflictAsResult': !exists(json, 'returnConflictAsResult') ? undefined : json['returnConflictAsResult'],
    };
}

export function Transplant1ToJSON(value?: Transplant1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fromRefName': value.fromRefName,
        'hashesToTransplant': Array.from(value.hashesToTransplant as Set<any>),
        'keyMergeModes': value.keyMergeModes === undefined ? undefined : ((value.keyMergeModes as Array<any>).map(MergeKeyBehaviorToJSON)),
        'defaultKeyMergeMode': MergeBehaviorToJSON(value.defaultKeyMergeMode),
        'dryRun': value.dryRun,
        'fetchAdditionalInfo': value.fetchAdditionalInfo,
        'returnConflictAsResult': value.returnConflictAsResult,
    };
}

