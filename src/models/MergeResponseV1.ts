/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyDetailsV1 } from './ContentKeyDetailsV1';
import {
    ContentKeyDetailsV1FromJSON,
    ContentKeyDetailsV1FromJSONTyped,
    ContentKeyDetailsV1ToJSON,
} from './ContentKeyDetailsV1';

/**
 * 
 * @export
 * @interface MergeResponseV1
 */
export interface MergeResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof MergeResponseV1
     */
    resultantTargetHash?: string;
    /**
     * 
     * @type {string}
     * @memberof MergeResponseV1
     */
    commonAncestor?: string;
    /**
     * 
     * @type {string}
     * @memberof MergeResponseV1
     */
    targetBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof MergeResponseV1
     */
    effectiveTargetHash?: string;
    /**
     * 
     * @type {string}
     * @memberof MergeResponseV1
     */
    expectedHash?: string;
    /**
     * 
     * @type {Array<ContentKeyDetailsV1>}
     * @memberof MergeResponseV1
     */
    details?: Array<ContentKeyDetailsV1>;
}

/**
 * Check if a given object implements the MergeResponseV1 interface.
 */
export function instanceOfMergeResponseV1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MergeResponseV1FromJSON(json: any): MergeResponseV1 {
    return MergeResponseV1FromJSONTyped(json, false);
}

export function MergeResponseV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): MergeResponseV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resultantTargetHash': !exists(json, 'resultantTargetHash') ? undefined : json['resultantTargetHash'],
        'commonAncestor': !exists(json, 'commonAncestor') ? undefined : json['commonAncestor'],
        'targetBranch': !exists(json, 'targetBranch') ? undefined : json['targetBranch'],
        'effectiveTargetHash': !exists(json, 'effectiveTargetHash') ? undefined : json['effectiveTargetHash'],
        'expectedHash': !exists(json, 'expectedHash') ? undefined : json['expectedHash'],
        'details': !exists(json, 'details') ? undefined : ((json['details'] as Array<any>).map(ContentKeyDetailsV1FromJSON)),
    };
}

export function MergeResponseV1ToJSON(value?: MergeResponseV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resultantTargetHash': value.resultantTargetHash,
        'commonAncestor': value.commonAncestor,
        'targetBranch': value.targetBranch,
        'effectiveTargetHash': value.effectiveTargetHash,
        'expectedHash': value.expectedHash,
        'details': value.details === undefined ? undefined : ((value.details as Array<any>).map(ContentKeyDetailsV1ToJSON)),
    };
}

