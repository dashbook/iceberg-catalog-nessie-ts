/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntryV2 } from './EntryV2';
import {
    EntryV2FromJSON,
    EntryV2FromJSONTyped,
    EntryV2ToJSON,
} from './EntryV2';
import type { ReferenceV2 } from './ReferenceV2';
import {
    ReferenceV2FromJSON,
    ReferenceV2FromJSONTyped,
    ReferenceV2ToJSON,
} from './ReferenceV2';

/**
 * 
 * @export
 * @interface EntriesResponseV2
 */
export interface EntriesResponseV2 {
    /**
     * 
     * @type {boolean}
     * @memberof EntriesResponseV2
     */
    hasMore?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EntriesResponseV2
     */
    token?: string;
    /**
     * 
     * @type {Array<EntryV2>}
     * @memberof EntriesResponseV2
     */
    entries: Array<EntryV2>;
    /**
     * 
     * @type {ReferenceV2}
     * @memberof EntriesResponseV2
     */
    effectiveReference?: ReferenceV2;
}

/**
 * Check if a given object implements the EntriesResponseV2 interface.
 */
export function instanceOfEntriesResponseV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entries" in value;

    return isInstance;
}

export function EntriesResponseV2FromJSON(json: any): EntriesResponseV2 {
    return EntriesResponseV2FromJSONTyped(json, false);
}

export function EntriesResponseV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): EntriesResponseV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'entries': ((json['entries'] as Array<any>).map(EntryV2FromJSON)),
        'effectiveReference': !exists(json, 'effectiveReference') ? undefined : ReferenceV2FromJSON(json['effectiveReference']),
    };
}

export function EntriesResponseV2ToJSON(value?: EntriesResponseV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hasMore': value.hasMore,
        'token': value.token,
        'entries': ((value.entries as Array<any>).map(EntryV2ToJSON)),
        'effectiveReference': ReferenceV2ToJSON(value.effectiveReference),
    };
}

