/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV2 } from './ContentKeyV2';
import {
    ContentKeyV2FromJSON,
    ContentKeyV2FromJSONTyped,
    ContentKeyV2ToJSON,
} from './ContentKeyV2';
import type { ContentMetadataV2 } from './ContentMetadataV2';
import {
    ContentMetadataV2FromJSON,
    ContentMetadataV2FromJSONTyped,
    ContentMetadataV2ToJSON,
} from './ContentMetadataV2';
import type { ContentV2 } from './ContentV2';
import {
    ContentV2FromJSON,
    ContentV2FromJSONTyped,
    ContentV2ToJSON,
} from './ContentV2';
import type { DocumentationV2 } from './DocumentationV2';
import {
    DocumentationV2FromJSON,
    DocumentationV2FromJSONTyped,
    DocumentationV2ToJSON,
} from './DocumentationV2';

/**
 * Used to add new content or to update existing content.
 * 
 * A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).
 * 
 * A content object is updated by populating the `value` containing the correct content-id.
 * 
 * If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.
 * 
 * A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
 * @export
 * @interface PutV2
 */
export interface PutV2 {
    /**
     * 
     * @type {ContentKeyV2}
     * @memberof PutV2
     */
    key: ContentKeyV2;
    /**
     * 
     * @type {ContentV2}
     * @memberof PutV2
     */
    content: ContentV2;
    /**
     * 
     * @type {Array<ContentMetadataV2>}
     * @memberof PutV2
     */
    metadata?: Array<ContentMetadataV2>;
    /**
     * 
     * @type {DocumentationV2}
     * @memberof PutV2
     */
    documentation?: DocumentationV2;
}

/**
 * Check if a given object implements the PutV2 interface.
 */
export function instanceOfPutV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function PutV2FromJSON(json: any): PutV2 {
    return PutV2FromJSONTyped(json, false);
}

export function PutV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): PutV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': ContentKeyV2FromJSON(json['key']),
        'content': ContentV2FromJSON(json['content']),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(ContentMetadataV2FromJSON)),
        'documentation': !exists(json, 'documentation') ? undefined : DocumentationV2FromJSON(json['documentation']),
    };
}

export function PutV2ToJSON(value?: PutV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyV2ToJSON(value.key),
        'content': ContentV2ToJSON(value.content),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(ContentMetadataV2ToJSON)),
        'documentation': DocumentationV2ToJSON(value.documentation),
    };
}

