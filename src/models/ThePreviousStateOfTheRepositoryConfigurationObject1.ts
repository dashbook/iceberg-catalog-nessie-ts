/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GarbageCollectorConfig } from './GarbageCollectorConfig';
import {
    GarbageCollectorConfigFromJSON,
    GarbageCollectorConfigFromJSONTyped,
    GarbageCollectorConfigToJSON,
} from './GarbageCollectorConfig';
import type { ReferenceCutoffPolicy } from './ReferenceCutoffPolicy';
import {
    ReferenceCutoffPolicyFromJSON,
    ReferenceCutoffPolicyFromJSONTyped,
    ReferenceCutoffPolicyToJSON,
} from './ReferenceCutoffPolicy';

// import {
//      GarbageCollectorConfigFromJSONTyped
// } from './';

/**
 * When a repository configuration for the same type as in the request object did not exist, the response object will be null. Otherwise, if the configuration was updated, the old value will be returned.
 * @export
 * @interface ThePreviousStateOfTheRepositoryConfigurationObject1
 */
export interface ThePreviousStateOfTheRepositoryConfigurationObject1 {
    /**
     * The default cutoff policy.
     * Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
     * @type {string}
     * @memberof ThePreviousStateOfTheRepositoryConfigurationObject1
     */
    defaultCutoffPolicy?: string;
    /**
     * 
     * @type {Array<ReferenceCutoffPolicy>}
     * @memberof ThePreviousStateOfTheRepositoryConfigurationObject1
     */
    perRefCutoffPolicies?: Array<ReferenceCutoffPolicy>;
    /**
     * Files that have been created after 'gc-start-time - new-files-grace-period' are not being deleted.
     * @type {string}
     * @memberof ThePreviousStateOfTheRepositoryConfigurationObject1
     */
    newFilesGracePeriod?: string;
    /**
     * 
     * @type {number}
     * @memberof ThePreviousStateOfTheRepositoryConfigurationObject1
     */
    expectedFileCountPerContent?: number;
}

/**
 * Check if a given object implements the ThePreviousStateOfTheRepositoryConfigurationObject1 interface.
 */
export function instanceOfThePreviousStateOfTheRepositoryConfigurationObject1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThePreviousStateOfTheRepositoryConfigurationObject1FromJSON(json: any): ThePreviousStateOfTheRepositoryConfigurationObject1 {
    return ThePreviousStateOfTheRepositoryConfigurationObject1FromJSONTyped(json, false);
}

export function ThePreviousStateOfTheRepositoryConfigurationObject1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ThePreviousStateOfTheRepositoryConfigurationObject1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'GARBAGE_COLLECTOR') {
            return GarbageCollectorConfigFromJSONTyped(json, true);
        }
    }
    return {

        'defaultCutoffPolicy': !exists(json, 'defaultCutoffPolicy') ? undefined : json['defaultCutoffPolicy'],
        'perRefCutoffPolicies': !exists(json, 'perRefCutoffPolicies') ? undefined : ((json['perRefCutoffPolicies'] as Array<any>).map(ReferenceCutoffPolicyFromJSON)),
        'newFilesGracePeriod': !exists(json, 'newFilesGracePeriod') ? undefined : json['newFilesGracePeriod'],
        'expectedFileCountPerContent': !exists(json, 'expectedFileCountPerContent') ? undefined : json['expectedFileCountPerContent'],
    };
}

export function ThePreviousStateOfTheRepositoryConfigurationObject1ToJSON(value?: ThePreviousStateOfTheRepositoryConfigurationObject1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'defaultCutoffPolicy': value.defaultCutoffPolicy,
        'perRefCutoffPolicies': value.perRefCutoffPolicies === undefined ? undefined : ((value.perRefCutoffPolicies as Array<any>).map(ReferenceCutoffPolicyToJSON)),
        'newFilesGracePeriod': value.newFilesGracePeriod,
        'expectedFileCountPerContent': value.expectedFileCountPerContent,
    };
}

