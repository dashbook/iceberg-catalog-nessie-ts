/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configuration object to tell a client how a server is configured.
 * @export
 * @interface NessieConfiguration
 */
export interface NessieConfiguration {
    /**
     * 
     * @type {string}
     * @memberof NessieConfiguration
     */
    defaultBranch?: string;
    /**
     * 
     * @type {number}
     * @memberof NessieConfiguration
     */
    minSupportedApiVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof NessieConfiguration
     */
    maxSupportedApiVersion?: number;
    /**
     * 
     * @type {number}
     * @memberof NessieConfiguration
     */
    actualApiVersion?: number;
    /**
     * Semver version representing the behavior of the Nessie server.
     * 
     * Additional functionality might be added to Nessie servers within a "spec major version" in a non-breaking way. Clients are encouraged to check the spec version when using such added functionality.
     * @type {string}
     * @memberof NessieConfiguration
     */
    specVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof NessieConfiguration
     */
    noAncestorHash?: string;
    /**
     * 
     * @type {Date}
     * @memberof NessieConfiguration
     */
    repositoryCreationTimestamp?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NessieConfiguration
     */
    oldestPossibleCommitTimestamp?: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof NessieConfiguration
     */
    additionalProperties?: { [key: string]: string; };
}

/**
 * Check if a given object implements the NessieConfiguration interface.
 */
export function instanceOfNessieConfiguration(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NessieConfigurationFromJSON(json: any): NessieConfiguration {
    return NessieConfigurationFromJSONTyped(json, false);
}

export function NessieConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): NessieConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultBranch': !exists(json, 'defaultBranch') ? undefined : json['defaultBranch'],
        'minSupportedApiVersion': !exists(json, 'minSupportedApiVersion') ? undefined : json['minSupportedApiVersion'],
        'maxSupportedApiVersion': !exists(json, 'maxSupportedApiVersion') ? undefined : json['maxSupportedApiVersion'],
        'actualApiVersion': !exists(json, 'actualApiVersion') ? undefined : json['actualApiVersion'],
        'specVersion': !exists(json, 'specVersion') ? undefined : json['specVersion'],
        'noAncestorHash': !exists(json, 'noAncestorHash') ? undefined : json['noAncestorHash'],
        'repositoryCreationTimestamp': !exists(json, 'repositoryCreationTimestamp') ? undefined : (new Date(json['repositoryCreationTimestamp'])),
        'oldestPossibleCommitTimestamp': !exists(json, 'oldestPossibleCommitTimestamp') ? undefined : (new Date(json['oldestPossibleCommitTimestamp'])),
        'additionalProperties': !exists(json, 'additionalProperties') ? undefined : json['additionalProperties'],
    };
}

export function NessieConfigurationToJSON(value?: NessieConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultBranch': value.defaultBranch,
        'minSupportedApiVersion': value.minSupportedApiVersion,
        'maxSupportedApiVersion': value.maxSupportedApiVersion,
        'actualApiVersion': value.actualApiVersion,
        'specVersion': value.specVersion,
        'noAncestorHash': value.noAncestorHash,
        'repositoryCreationTimestamp': value.repositoryCreationTimestamp === undefined ? undefined : (value.repositoryCreationTimestamp.toISOString()),
        'oldestPossibleCommitTimestamp': value.oldestPossibleCommitTimestamp === undefined ? undefined : (value.oldestPossibleCommitTimestamp.toISOString()),
        'additionalProperties': value.additionalProperties,
    };
}

