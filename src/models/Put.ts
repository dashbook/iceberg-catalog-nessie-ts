/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Content } from './Content';
import {
    ContentFromJSON,
    ContentFromJSONTyped,
    ContentToJSON,
} from './Content';
import type { ContentKey } from './ContentKey';
import {
    ContentKeyFromJSON,
    ContentKeyFromJSONTyped,
    ContentKeyToJSON,
} from './ContentKey';
import type { ContentMetadata } from './ContentMetadata';
import {
    ContentMetadataFromJSON,
    ContentMetadataFromJSONTyped,
    ContentMetadataToJSON,
} from './ContentMetadata';
import type { Documentation } from './Documentation';
import {
    DocumentationFromJSON,
    DocumentationFromJSONTyped,
    DocumentationToJSON,
} from './Documentation';
import type { PutExpectedContent } from './PutExpectedContent';
import {
    PutExpectedContentFromJSON,
    PutExpectedContentFromJSONTyped,
    PutExpectedContentToJSON,
} from './PutExpectedContent';

/**
 * Used to add new content or to update existing content.
 * 
 * A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).
 * 
 * A content object is updated by populating the `value` containing the correct content-id.
 * 
 * If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.
 * 
 * A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
 * @export
 * @interface Put
 */
export interface Put {
    /**
     * 
     * @type {ContentKey}
     * @memberof Put
     */
    key: ContentKey;
    /**
     * 
     * @type {Content}
     * @memberof Put
     */
    content: Content;
    /**
     * 
     * @type {PutExpectedContent}
     * @memberof Put
     * @deprecated
     */
    expectedContent?: PutExpectedContent;
    /**
     * 
     * @type {Array<ContentMetadata>}
     * @memberof Put
     */
    metadata?: Array<ContentMetadata>;
    /**
     * 
     * @type {Documentation}
     * @memberof Put
     */
    documentation?: Documentation;
}

/**
 * Check if a given object implements the Put interface.
 */
export function instanceOfPut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function PutFromJSON(json: any): Put {
    return PutFromJSONTyped(json, false);
}

export function PutFromJSONTyped(json: any, ignoreDiscriminator: boolean): Put {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': ContentKeyFromJSON(json['key']),
        'content': ContentFromJSON(json['content']),
        'expectedContent': !exists(json, 'expectedContent') ? undefined : PutExpectedContentFromJSON(json['expectedContent']),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(ContentMetadataFromJSON)),
        'documentation': !exists(json, 'documentation') ? undefined : DocumentationFromJSON(json['documentation']),
    };
}

export function PutToJSON(value?: Put | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyToJSON(value.key),
        'content': ContentToJSON(value.content),
        'expectedContent': PutExpectedContentToJSON(value.expectedContent),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(ContentMetadataToJSON)),
        'documentation': DocumentationToJSON(value.documentation),
    };
}

