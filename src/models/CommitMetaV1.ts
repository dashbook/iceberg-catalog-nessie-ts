/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommitMetaV1
 */
export interface CommitMetaV1 {
    /**
     * 
     * @type {string}
     * @memberof CommitMetaV1
     */
    hash?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitMetaV1
     */
    committer?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitMetaV1
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitMetaV1
     */
    signedOffBy?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitMetaV1
     */
    message: string;
    /**
     * 
     * @type {Date}
     * @memberof CommitMetaV1
     */
    commitTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommitMetaV1
     */
    authorTime?: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommitMetaV1
     */
    properties: { [key: string]: string; };
}

/**
 * Check if a given object implements the CommitMetaV1 interface.
 */
export function instanceOfCommitMetaV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "properties" in value;

    return isInstance;
}

export function CommitMetaV1FromJSON(json: any): CommitMetaV1 {
    return CommitMetaV1FromJSONTyped(json, false);
}

export function CommitMetaV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): CommitMetaV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'committer': !exists(json, 'committer') ? undefined : json['committer'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'signedOffBy': !exists(json, 'signedOffBy') ? undefined : json['signedOffBy'],
        'message': json['message'],
        'commitTime': !exists(json, 'commitTime') ? undefined : (new Date(json['commitTime'])),
        'authorTime': !exists(json, 'authorTime') ? undefined : (new Date(json['authorTime'])),
        'properties': json['properties'],
    };
}

export function CommitMetaV1ToJSON(value?: CommitMetaV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hash': value.hash,
        'committer': value.committer,
        'author': value.author,
        'signedOffBy': value.signedOffBy,
        'message': value.message,
        'commitTime': value.commitTime === undefined ? undefined : (value.commitTime.toISOString()),
        'authorTime': value.authorTime === undefined ? undefined : (value.authorTime.toISOString()),
        'properties': value.properties,
    };
}

