/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKey } from './ContentKey';
import {
    ContentKeyFromJSON,
    ContentKeyFromJSONTyped,
    ContentKeyToJSON,
} from './ContentKey';
import type { MergeBehavior } from './MergeBehavior';
import {
    MergeBehaviorFromJSON,
    MergeBehaviorFromJSONTyped,
    MergeBehaviorToJSON,
} from './MergeBehavior';

/**
 * 
 * @export
 * @interface ContentKeyDetails
 */
export interface ContentKeyDetails {
    /**
     * 
     * @type {ContentKey}
     * @memberof ContentKeyDetails
     */
    key?: ContentKey;
    /**
     * 
     * @type {MergeBehavior}
     * @memberof ContentKeyDetails
     */
    mergeBehavior?: MergeBehavior;
    /**
     * 
     * @type {object}
     * @memberof ContentKeyDetails
     */
    conflict?: object;
}

/**
 * Check if a given object implements the ContentKeyDetails interface.
 */
export function instanceOfContentKeyDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContentKeyDetailsFromJSON(json: any): ContentKeyDetails {
    return ContentKeyDetailsFromJSONTyped(json, false);
}

export function ContentKeyDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentKeyDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : ContentKeyFromJSON(json['key']),
        'mergeBehavior': !exists(json, 'mergeBehavior') ? undefined : MergeBehaviorFromJSON(json['mergeBehavior']),
        'conflict': !exists(json, 'conflict') ? undefined : json['conflict'],
    };
}

export function ContentKeyDetailsToJSON(value?: ContentKeyDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyToJSON(value.key),
        'mergeBehavior': MergeBehaviorToJSON(value.mergeBehavior),
        'conflict': value.conflict,
    };
}

