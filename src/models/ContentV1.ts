/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DeltaLakeTableV1 } from './DeltaLakeTableV1';
import {
    DeltaLakeTableV1FromJSON,
    DeltaLakeTableV1FromJSONTyped,
    DeltaLakeTableV1ToJSON,
} from './DeltaLakeTableV1';
import type { IcebergTableV1 } from './IcebergTableV1';
import {
    IcebergTableV1FromJSON,
    IcebergTableV1FromJSONTyped,
    IcebergTableV1ToJSON,
} from './IcebergTableV1';
import type { IcebergViewV1 } from './IcebergViewV1';
import {
    IcebergViewV1FromJSON,
    IcebergViewV1FromJSONTyped,
    IcebergViewV1ToJSON,
} from './IcebergViewV1';
import type { NamespaceV1 } from './NamespaceV1';
import {
    NamespaceV1FromJSON,
    NamespaceV1FromJSONTyped,
    NamespaceV1ToJSON,
} from './NamespaceV1';
import type { UDFV1 } from './UDFV1';
import {
    UDFV1FromJSON,
    UDFV1FromJSONTyped,
    UDFV1ToJSON,
} from './UDFV1';

// import {
//     DeltaLakeTableV1FromJSONTyped,
//     IcebergTableV1FromJSONTyped,
//     IcebergViewV1FromJSONTyped,
//     NamespaceV1FromJSONTyped,
//     UDFV1FromJSONTyped
// } from './';

/**
 * 
 * @export
 * @interface ContentV1
 */
export interface ContentV1 {
    /**
     * 
     * @type {string}
     * @memberof ContentV1
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentV1
     */
    metadataLocation?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentV1
     */
    snapshotId?: number;
    /**
     * 
     * @type {number}
     * @memberof ContentV1
     */
    schemaId?: number;
    /**
     * 
     * @type {number}
     * @memberof ContentV1
     */
    specId?: number;
    /**
     * 
     * @type {number}
     * @memberof ContentV1
     */
    sortOrderId?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ContentV1
     * @deprecated
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ContentV1
     */
    metadataLocationHistory?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContentV1
     */
    checkpointLocationHistory?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContentV1
     */
    lastCheckpoint?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentV1
     */
    versionId?: number;
    /**
     * 
     * @type {string}
     * @memberof ContentV1
     */
    sqlText?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentV1
     */
    dialect?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContentV1
     */
    elements?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ContentV1
     */
    properties?: { [key: string]: string; };
}

/**
 * Check if a given object implements the ContentV1 interface.
 */
export function instanceOfContentV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadataLocation" in value;
    isInstance = isInstance && "metadataLocationHistory" in value;
    isInstance = isInstance && "checkpointLocationHistory" in value;
    isInstance = isInstance && "sqlText" in value;
    isInstance = isInstance && "elements" in value;
    isInstance = isInstance && "properties" in value;

    return isInstance;
}

export function ContentV1FromJSON(json: any): ContentV1 {
    return ContentV1FromJSONTyped(json, false);
}

export function ContentV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'DELTA_LAKE_TABLE') {
            return DeltaLakeTableV1FromJSONTyped(json, true);
        }
        if (json['type'] === 'ICEBERG_TABLE') {
            return IcebergTableV1FromJSONTyped(json, true);
        }
        if (json['type'] === 'ICEBERG_VIEW') {
            return IcebergViewV1FromJSONTyped(json, true);
        }
        if (json['type'] === 'NAMESPACE') {
            return NamespaceV1FromJSONTyped(json, true);
        }
        if (json['type'] === 'UDF') {
            return UDFV1FromJSONTyped(json, true);
        }
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'metadataLocation': json['metadataLocation'],
        'snapshotId': !exists(json, 'snapshotId') ? undefined : json['snapshotId'],
        'schemaId': !exists(json, 'schemaId') ? undefined : json['schemaId'],
        'specId': !exists(json, 'specId') ? undefined : json['specId'],
        'sortOrderId': !exists(json, 'sortOrderId') ? undefined : json['sortOrderId'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'metadataLocationHistory': json['metadataLocationHistory'],
        'checkpointLocationHistory': json['checkpointLocationHistory'],
        'lastCheckpoint': !exists(json, 'lastCheckpoint') ? undefined : json['lastCheckpoint'],
        'versionId': !exists(json, 'versionId') ? undefined : json['versionId'],
        'sqlText': json['sqlText'],
        'dialect': !exists(json, 'dialect') ? undefined : json['dialect'],
        'elements': json['elements'],
        'properties': json['properties'],
    };
}

export function ContentV1ToJSON(value?: ContentV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'metadataLocation': value.metadataLocation,
        'snapshotId': value.snapshotId,
        'schemaId': value.schemaId,
        'specId': value.specId,
        'sortOrderId': value.sortOrderId,
        'metadata': value.metadata,
        'metadataLocationHistory': value.metadataLocationHistory,
        'checkpointLocationHistory': value.checkpointLocationHistory,
        'lastCheckpoint': value.lastCheckpoint,
        'versionId': value.versionId,
        'sqlText': value.sqlText,
        'dialect': value.dialect,
        'elements': value.elements,
        'properties': value.properties,
    };
}

