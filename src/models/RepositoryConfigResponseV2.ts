/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RepositoryConfigV2 } from './RepositoryConfigV2';
import {
    RepositoryConfigV2FromJSON,
    RepositoryConfigV2FromJSONTyped,
    RepositoryConfigV2ToJSON,
} from './RepositoryConfigV2';

/**
 * The existing configuration objects for the requested types will be returned. Non-existing config objects will not be returned.
 * @export
 * @interface RepositoryConfigResponseV2
 */
export interface RepositoryConfigResponseV2 {
    /**
     * The existing configuration objects for the requested types will be returned. Non-existing config objects will not be returned.
     * @type {Array<RepositoryConfigV2>}
     * @memberof RepositoryConfigResponseV2
     */
    configs?: Array<RepositoryConfigV2>;
}

/**
 * Check if a given object implements the RepositoryConfigResponseV2 interface.
 */
export function instanceOfRepositoryConfigResponseV2(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RepositoryConfigResponseV2FromJSON(json: any): RepositoryConfigResponseV2 {
    return RepositoryConfigResponseV2FromJSONTyped(json, false);
}

export function RepositoryConfigResponseV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): RepositoryConfigResponseV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configs': !exists(json, 'configs') ? undefined : ((json['configs'] as Array<any>).map(RepositoryConfigV2FromJSON)),
    };
}

export function RepositoryConfigResponseV2ToJSON(value?: RepositoryConfigResponseV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configs': value.configs === undefined ? undefined : ((value.configs as Array<any>).map(RepositoryConfigV2ToJSON)),
    };
}

