/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Content } from './Content';
import {
    ContentFromJSON,
    ContentFromJSONTyped,
    ContentToJSON,
} from './Content';
import type { ContentKey } from './ContentKey';
import {
    ContentKeyFromJSON,
    ContentKeyFromJSONTyped,
    ContentKeyToJSON,
} from './ContentKey';

/**
 * 
 * @export
 * @interface DiffEntry
 */
export interface DiffEntry {
    /**
     * 
     * @type {ContentKey}
     * @memberof DiffEntry
     */
    key?: ContentKey;
    /**
     * 
     * @type {Content}
     * @memberof DiffEntry
     */
    from?: Content;
    /**
     * 
     * @type {Content}
     * @memberof DiffEntry
     */
    to?: Content;
}

/**
 * Check if a given object implements the DiffEntry interface.
 */
export function instanceOfDiffEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DiffEntryFromJSON(json: any): DiffEntry {
    return DiffEntryFromJSONTyped(json, false);
}

export function DiffEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiffEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : ContentKeyFromJSON(json['key']),
        'from': !exists(json, 'from') ? undefined : ContentFromJSON(json['from']),
        'to': !exists(json, 'to') ? undefined : ContentFromJSON(json['to']),
    };
}

export function DiffEntryToJSON(value?: DiffEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyToJSON(value.key),
        'from': ContentToJSON(value.from),
        'to': ContentToJSON(value.to),
    };
}

