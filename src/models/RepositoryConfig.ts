/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GarbageCollectorConfig } from './GarbageCollectorConfig';
import {
    GarbageCollectorConfigFromJSON,
    GarbageCollectorConfigFromJSONTyped,
    GarbageCollectorConfigToJSON,
} from './GarbageCollectorConfig';
import type { ReferenceCutoffPolicy } from './ReferenceCutoffPolicy';
import {
    ReferenceCutoffPolicyFromJSON,
    ReferenceCutoffPolicyFromJSONTyped,
    ReferenceCutoffPolicyToJSON,
} from './ReferenceCutoffPolicy';

// import {
//      GarbageCollectorConfigFromJSONTyped
// } from './';

/**
 * 
 * @export
 * @interface RepositoryConfig
 */
export interface RepositoryConfig {
    /**
     * The default cutoff policy.
     * Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
     * @type {string}
     * @memberof RepositoryConfig
     */
    defaultCutoffPolicy?: string;
    /**
     * 
     * @type {Array<ReferenceCutoffPolicy>}
     * @memberof RepositoryConfig
     */
    perRefCutoffPolicies?: Array<ReferenceCutoffPolicy>;
    /**
     * Files that have been created after 'gc-start-time - new-files-grace-period' are not being deleted.
     * @type {string}
     * @memberof RepositoryConfig
     */
    newFilesGracePeriod?: string;
    /**
     * 
     * @type {number}
     * @memberof RepositoryConfig
     */
    expectedFileCountPerContent?: number;
}

/**
 * Check if a given object implements the RepositoryConfig interface.
 */
export function instanceOfRepositoryConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RepositoryConfigFromJSON(json: any): RepositoryConfig {
    return RepositoryConfigFromJSONTyped(json, false);
}

export function RepositoryConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepositoryConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'GARBAGE_COLLECTOR') {
            return GarbageCollectorConfigFromJSONTyped(json, true);
        }
    }
    return {

        'defaultCutoffPolicy': !exists(json, 'defaultCutoffPolicy') ? undefined : json['defaultCutoffPolicy'],
        'perRefCutoffPolicies': !exists(json, 'perRefCutoffPolicies') ? undefined : ((json['perRefCutoffPolicies'] as Array<any>).map(ReferenceCutoffPolicyFromJSON)),
        'newFilesGracePeriod': !exists(json, 'newFilesGracePeriod') ? undefined : json['newFilesGracePeriod'],
        'expectedFileCountPerContent': !exists(json, 'expectedFileCountPerContent') ? undefined : json['expectedFileCountPerContent'],
    };
}

export function RepositoryConfigToJSON(value?: RepositoryConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'defaultCutoffPolicy': value.defaultCutoffPolicy,
        'perRefCutoffPolicies': value.perRefCutoffPolicies === undefined ? undefined : ((value.perRefCutoffPolicies as Array<any>).map(ReferenceCutoffPolicyToJSON)),
        'newFilesGracePeriod': value.newFilesGracePeriod,
        'expectedFileCountPerContent': value.expectedFileCountPerContent,
    };
}

