/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV2 } from './ContentKeyV2';
import {
    ContentKeyV2FromJSON,
    ContentKeyV2FromJSONTyped,
    ContentKeyV2ToJSON,
} from './ContentKeyV2';
import type { MergeBehaviorV2 } from './MergeBehaviorV2';
import {
    MergeBehaviorV2FromJSON,
    MergeBehaviorV2FromJSONTyped,
    MergeBehaviorV2ToJSON,
} from './MergeBehaviorV2';

/**
 * 
 * @export
 * @interface ContentKeyDetailsV2
 */
export interface ContentKeyDetailsV2 {
    /**
     * 
     * @type {ContentKeyV2}
     * @memberof ContentKeyDetailsV2
     */
    key?: ContentKeyV2;
    /**
     * 
     * @type {MergeBehaviorV2}
     * @memberof ContentKeyDetailsV2
     */
    mergeBehavior?: MergeBehaviorV2;
    /**
     * 
     * @type {object}
     * @memberof ContentKeyDetailsV2
     */
    conflict?: object;
}

/**
 * Check if a given object implements the ContentKeyDetailsV2 interface.
 */
export function instanceOfContentKeyDetailsV2(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContentKeyDetailsV2FromJSON(json: any): ContentKeyDetailsV2 {
    return ContentKeyDetailsV2FromJSONTyped(json, false);
}

export function ContentKeyDetailsV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentKeyDetailsV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : ContentKeyV2FromJSON(json['key']),
        'mergeBehavior': !exists(json, 'mergeBehavior') ? undefined : MergeBehaviorV2FromJSON(json['mergeBehavior']),
        'conflict': !exists(json, 'conflict') ? undefined : json['conflict'],
    };
}

export function ContentKeyDetailsV2ToJSON(value?: ContentKeyDetailsV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyV2ToJSON(value.key),
        'mergeBehavior': MergeBehaviorV2ToJSON(value.mergeBehavior),
        'conflict': value.conflict,
    };
}

