/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    BranchV1,
    instanceOfBranchV1,
    BranchV1FromJSON,
    BranchV1FromJSONTyped,
    BranchV1ToJSON,
} from './BranchV1';
import {
    DetachedV1,
    instanceOfDetachedV1,
    DetachedV1FromJSON,
    DetachedV1FromJSONTyped,
    DetachedV1ToJSON,
} from './DetachedV1';
import {
    TagV1,
    instanceOfTagV1,
    TagV1FromJSON,
    TagV1FromJSONTyped,
    TagV1ToJSON,
} from './TagV1';

/**
 * @type ReferenceV1
 * 
 * @export
 */
export type ReferenceV1 = { type: 'BRANCH' } & BranchV1 | { type: 'DETACHED' } & DetachedV1 | { type: 'TAG' } & TagV1;

export function ReferenceV1FromJSON(json: any): ReferenceV1 {
    return ReferenceV1FromJSONTyped(json, false);
}

export function ReferenceV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferenceV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'BRANCH':
            return {...BranchV1FromJSONTyped(json, true), type: 'BRANCH'};
        case 'DETACHED':
            return {...DetachedV1FromJSONTyped(json, true), type: 'DETACHED'};
        case 'TAG':
            return {...TagV1FromJSONTyped(json, true), type: 'TAG'};
        default:
            throw new Error(`No variant of ReferenceV1 exists with 'type=${json['type']}'`);
    }
}

export function ReferenceV1ToJSON(value?: ReferenceV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'BRANCH':
            return BranchV1ToJSON(value);
        case 'DETACHED':
            return DetachedV1ToJSON(value);
        case 'TAG':
            return TagV1ToJSON(value);
        default:
            throw new Error(`No variant of ReferenceV1 exists with 'type=${value['type']}'`);
    }

}

