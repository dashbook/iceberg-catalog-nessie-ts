/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.65.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV1 } from './ContentKeyV1';
import {
    ContentKeyV1FromJSON,
    ContentKeyV1FromJSONTyped,
    ContentKeyV1ToJSON,
} from './ContentKeyV1';
import type { ContentV1 } from './ContentV1';
import {
    ContentV1FromJSON,
    ContentV1FromJSONTyped,
    ContentV1ToJSON,
} from './ContentV1';

/**
 * 
 * @export
 * @interface DiffEntryV1
 */
export interface DiffEntryV1 {
    /**
     * 
     * @type {ContentKeyV1}
     * @memberof DiffEntryV1
     */
    key?: ContentKeyV1;
    /**
     * 
     * @type {ContentV1}
     * @memberof DiffEntryV1
     */
    from?: ContentV1;
    /**
     * 
     * @type {ContentV1}
     * @memberof DiffEntryV1
     */
    to?: ContentV1;
}

/**
 * Check if a given object implements the DiffEntryV1 interface.
 */
export function instanceOfDiffEntryV1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DiffEntryV1FromJSON(json: any): DiffEntryV1 {
    return DiffEntryV1FromJSONTyped(json, false);
}

export function DiffEntryV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DiffEntryV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : ContentKeyV1FromJSON(json['key']),
        'from': !exists(json, 'from') ? undefined : ContentV1FromJSON(json['from']),
        'to': !exists(json, 'to') ? undefined : ContentV1FromJSON(json['to']),
    };
}

export function DiffEntryV1ToJSON(value?: DiffEntryV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': ContentKeyV1ToJSON(value.key),
        'from': ContentV1ToJSON(value.from),
        'to': ContentV1ToJSON(value.to),
    };
}

