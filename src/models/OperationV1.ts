/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    DeleteV1,
    instanceOfDeleteV1,
    DeleteV1FromJSON,
    DeleteV1FromJSONTyped,
    DeleteV1ToJSON,
} from './DeleteV1';
import {
    PutV1,
    instanceOfPutV1,
    PutV1FromJSON,
    PutV1FromJSONTyped,
    PutV1ToJSON,
} from './PutV1';
import {
    UnchangedV1,
    instanceOfUnchangedV1,
    UnchangedV1FromJSON,
    UnchangedV1FromJSONTyped,
    UnchangedV1ToJSON,
} from './UnchangedV1';

/**
 * @type OperationV1
 * Describes an operation to be performed against one content object.
 * 
 * The Nessie backend will validate the correctness of the operations.
 * @export
 */
export type OperationV1 = { type: 'DELETE' } & DeleteV1 | { type: 'PUT' } & PutV1 | { type: 'UNCHANGED' } & UnchangedV1;

export function OperationV1FromJSON(json: any): OperationV1 {
    return OperationV1FromJSONTyped(json, false);
}

export function OperationV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): OperationV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'DELETE':
            return {...DeleteV1FromJSONTyped(json, true), type: 'DELETE'};
        case 'PUT':
            return {...PutV1FromJSONTyped(json, true), type: 'PUT'};
        case 'UNCHANGED':
            return {...UnchangedV1FromJSONTyped(json, true), type: 'UNCHANGED'};
        default:
            throw new Error(`No variant of OperationV1 exists with 'type=${json['type']}'`);
    }
}

export function OperationV1ToJSON(value?: OperationV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'DELETE':
            return DeleteV1ToJSON(value);
        case 'PUT':
            return PutV1ToJSON(value);
        case 'UNCHANGED':
            return UnchangedV1ToJSON(value);
        default:
            throw new Error(`No variant of OperationV1 exists with 'type=${value['type']}'`);
    }

}

