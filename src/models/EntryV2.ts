/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables
 *
 * The version of the OpenAPI document: 0.69.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentKeyV2 } from './ContentKeyV2';
import {
    ContentKeyV2FromJSON,
    ContentKeyV2FromJSONTyped,
    ContentKeyV2ToJSON,
} from './ContentKeyV2';
import type { ContentV2 } from './ContentV2';
import {
    ContentV2FromJSON,
    ContentV2FromJSONTyped,
    ContentV2ToJSON,
} from './ContentV2';

/**
 * 
 * @export
 * @interface EntryV2
 */
export interface EntryV2 {
    /**
     * Declares the type of a Nessie content object, which is currently one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF, which are the discriminator mapping values of the 'Content' type.
     * @type {string}
     * @memberof EntryV2
     */
    type?: string;
    /**
     * 
     * @type {ContentKeyV2}
     * @memberof EntryV2
     */
    name: ContentKeyV2;
    /**
     * 
     * @type {string}
     * @memberof EntryV2
     */
    contentId?: string;
    /**
     * 
     * @type {ContentV2}
     * @memberof EntryV2
     */
    content?: ContentV2;
}

/**
 * Check if a given object implements the EntryV2 interface.
 */
export function instanceOfEntryV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function EntryV2FromJSON(json: any): EntryV2 {
    return EntryV2FromJSONTyped(json, false);
}

export function EntryV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): EntryV2 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': ContentKeyV2FromJSON(json['name']),
        'contentId': !exists(json, 'contentId') ? undefined : json['contentId'],
        'content': !exists(json, 'content') ? undefined : ContentV2FromJSON(json['content']),
    };
}

export function EntryV2ToJSON(value?: EntryV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'name': ContentKeyV2ToJSON(value.name),
        'contentId': value.contentId,
        'content': ContentV2ToJSON(value.content),
    };
}

